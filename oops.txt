1.Programs on Operators and Inline Function.
#include <iostream>
using namespace std;
class operation {
int a, b, add, sub, mul;
float div;
public:
void get();
void sum();
void difference();
void product();
void division();
};
inline void operation ::get()
{
cout << "Enter first value:";
cin >> a;
cout << "Enter second value:";
cin >> b;
}
inline void operation ::sum()
{
add = a + b;
cout << "Addition of two numbers: " << a + b <<
"\n";
}
inline void operation ::difference()
{
sub = a - b;
cout << "Difference of two numbers: " << a - b <<
"\n";
}
inline void operation ::product()
{
mul = a * b;
cout << "Product of two numbers: " << a * b <<
"\n";
}
inline void operation ::division()
{
div = a / b;
cout << "Division of two numbers: " << a / b <<
"\n";
}
int main()
{
cout << "Program using inline function\n";
operation s;
s.get();
s.sum();
s.difference();
s.product();
s.division();
return 0;
}
2 A. matrix addition of array
#include <iostream>
using namespace std;
int main()
{
int a[2][2];
int b[2][2];
int sum [2][2];
cout<<"enter the elements for matrix A:";
for(int i=0;i<2;i++){
for(int j=0;j<2;j++){
cin>>a[i][j];
}
}
cout<<"enter the elements for matrix B:";
for(int i=0;i<2;i++){
for(int j=0;j<2;j++){
cin>>b[i][j];
}
}
for(int i=0;i<2;i++){
for(int j=0;j<2;j++){
sum[i][j] = a[i][j] + b[i][j];
cout<< sum[i][j]<<" ";
}
cout<<"\n";
}
return 0;
}
2 B. Sorting of Array:
#include <algorithm>
#include <iostream>
using namespace std;
int main()
{
int arr[] = { 5, 4, 1, 2, 3 };
int n = sizeof(arr) / sizeof(arr[0]);
cout << "Array Before Sorting: ";
for (int i = 0; i < n; i++) {
cout << arr[i] << " ";
}
cout << endl;
sort(arr, arr + n);
cout << "Array After Sorting: ";
for (int i = 0; i < n; i++) {
cout << arr[i] << " ";
}
return 0;
}
3.Classes and Objects
#include <iostream>
#include <string>
using namespace std;
class Person {
public:
string name;
int age;
void introduce()
{
cout << "Hi, my name is " << name << " and I
am "
<< age << " years old." << endl;
}
};
int main()
{
Person person1;
person1.name = "Alice";
person1.age = 30;
person1.introduce();
return 0;
}
4 A. Single Inheritance
#include <iostream>
using namespace std;
class Vehicle {
public:
 Vehicle() { cout << "This is a Vehicle\n"; }
};
class Car : public Vehicle {
public:
 Car() { cout << "This Vehicle is Car\n"; }
};
int main()
{
 Car obj;
 return 0;
}
4 B.Multiple Inheritance
#include <iostream>
using namespace std;
class Vehicle {
public:
 Vehicle() { cout << "This is a Vehicle\n"; }
};
class FourWheeler {
public:
 FourWheeler() { cout << "This is a 4
Wheeler\n"; }
};
class Car : public Vehicle, public FourWheeler
{
 public:
 Car() { cout << "This 4 Wheeler Vehical is a
Car\n"; }
};
int main()
{
 Car obj;
 return 0;
4 C.Multilevel Inheritance
#include <iostream>
using namespace std;
class Vehicle {
public:
 Vehicle() { cout << "This is a Vehicle\n"; }
};
class fourWheeler : public Vehicle {
public:
 fourWheeler() { cout << "4 Wheeler
Vehicles\n"; }
};
class Car : public fourWheeler {
public:
 Car() { cout << "This 4 Wheeler Vehical is a
Car\n"; }
};
int main()
{
 Car obj;
 return 0;
4 2. Polymorphism
#include <iostream>
using namespace std;
 int sum(int num1, int num2)
 {
 return num1 + num2;
}
double sum(double num1, double num2)
{
 return num1 + num2;
}
int sum(int num1, int num2, int num3)
{
 return num1 + num2 + num3;
}
int main() {
 cout << "Sum 1 = " << sum(4, 8) << endl;
 cout << "Sum 2 = " << sum(5.5, 6.6) << endl;
 cout << "Sum 3 = " << sum(5, 9, 8) << endl;
 return 0;
}
5. Operator Overloading
#include <iostream>
using namespace std;
class Complex {
private:
int real, imag;
public:
Complex(int r = 0, int i = 0)
{
real = r;
imag = i;
}
Complex operator+(Complex const& obj)
{
Complex res;
res.real = real + obj.real;
res.imag = imag + obj.imag;
return res;
}
void print() { cout << real << " + i" << imag << '\n';
}
};
int main()
{
Complex c1(10, 5), c2(2, 4);
Complex c3 = c1 + c2;
c3.print();
}
7. Friend Function.
#include <iostream>
using namespace std;
class GFG {
private:
int private_variable;
protected:
int protected_variable;
public:
GFG()
{
private_variable = 10;
protected_variable = 99;
}
friend class F;
};
class F {
public:
void display(GFG& t)
{
cout << "The value of Private Variable = "
<< t.private_variable << endl;
cout << "The value of Protected Variable = "
<< t.protected_variable;
}
};
int main()
{
GFG g;
F fri;
fri.display(g);
return 0;
}
8 A. File Handling
#include <fstream>
#include <iostream>
#include <string>
using namespace std;
int main()
{
ofstream fout;
fout.open("NewFile.txt");
if (!fout) {
cerr << "Error opening file!" << endl;
return 1;
}
string line;
int i = 0;
cout << "Enter 5 lines of text:" << endl;
while (i < 5) {
getline(cin, line);
fout << line << endl;
i += 1;
}
fout.close();
cout << "Text successfully written to NewFile.txt"
<< endl;
return 0;
}
8 B. stream manipulation.
#include <iostream>
#include <string>
using namespace std;
int main(){
string str = "geeksforgeeks";
std::string::iterator it;
std::string::reverse_iterator it1;
cout<<"Str:"<<str<<"\n";
cout << "The string using forward iterators is : ";
for (it = str.begin(); it != str.end(); it++){
if(it == str.begin()) *it='G';
cout << *it; }
cout << endl;
str = "geeksforgeeks";
cout << "The reverse string using reverse iterators
is " ": ";
for (it1 = str.rbegin(); it1 != str.rend(); it1++){
if(it1 == str.rbegin()) *it1='S';
cout << *it1; }
cout << endl;
str = "geeksforgeeks";
cout<<"The string using constant forward iterator
is :";
for(auto it2 = str.cbegin(); it2!=str.cend(); it2++){
cout<<*it2; }
cout<<"\n";
str = "geeksforgeeks";
cout<<"The reverse string using constant reverse
iterator is :";
for(auto it3 = str.crbegin(); it3!=str.crend(); it3++){
cout<<*it3; }
cout<<"\n";
return 0;}
9. Exception Handling
#include <iostream>
#include <stdexcept>
using namespace std;
int main()
{
try {
int numerator = 10;
int denominator = 0;
int res;
if (denominator == 0) {
throw runtime_error(
"Division by zero not allowed!");
}
res = numerator / denominator;
cout << "Result after division: " << res << endl;
}
catch (const exception& e) {
cout << "Exception " << e.what() << endl;
}
return 0;
}
10. Templates
#include <iostream>
#include <string>
#include <typeinfo>
using namespace std;
template <typename T> class student {
private:
string student_name;
T total_marks;
public:
student(string n, T m)
: student_name(n)
, total_marks(m)
{
}
void getinfo()
{
cout << "STUDENT NAME: " << student_name <<
endl;
cout << "TOTAL MARKS: " << total_marks << endl;
cout << "Type ID: " << typeid(total_marks).name()
<< endl;
}
};
int main()
{
student s1("Vipul", 100);
student s2("Yash", 98.5);
s1.getinfo();
s2.getinfo();
return 0;
}